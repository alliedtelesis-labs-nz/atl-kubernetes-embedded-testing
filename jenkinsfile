pipeline {
    agent {
        label "${AGENT_LABEL}"
    }

    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '50', daysToKeepStr: '30'))
    }

    environment {
        GO_VERSION   = '1.24'
        PROJECT_DIR  = 'kubernetes-embedded-testing'
    }

    stages {

       stage('Clone Repository') {
            steps {
                git url: "${env.MY_GIT_URL}", branch: "${env.MY_GIT_BRANCH}"
                script {
                    GIT_COMMIT = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_COMMIT = GIT_COMMIT
                }
            }
        }

        stage('Build ket') {
            steps {
                    withDockerRegistry([credentialsId: 'maker-for-docker', url: 'https://docker.atlnz.lc']) {
                    sh '''
                        cd ${PROJECT_DIR}
                        docker build -t docker.atlnz.lc/gui/cloud/build/kubernetes-embedded-testing:${GIT_COMMIT} -t docker.atlnz.lc/gui/cloud/build/kubernetes-embedded-testing:latest .
                        docker push docker.atlnz.lc/gui/cloud/build/kubernetes-embedded-testing:${GIT_COMMIT}
                        docker push docker.atlnz.lc/gui/cloud/build/kubernetes-embedded-testing:latest
                        '''
                    }
            }
        }
    }

    post {
        always { cleanWs() }
    }
}
